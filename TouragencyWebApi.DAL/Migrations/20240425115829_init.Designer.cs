// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TouragencyWebApi.DAL.EF;

#nullable disable

namespace TouragencyWebApi.DAL.Migrations
{
    [DbContext(typeof(TouragencyContext))]
    [Migration("20240425115829_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BedConfigurationHotel", b =>
                {
                    b.Property<int>("BedConfigurationsId")
                        .HasColumnType("int");

                    b.Property<int>("HotelsId")
                        .HasColumnType("int");

                    b.HasKey("BedConfigurationsId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("BedConfigurationHotel");
                });

            modelBuilder.Entity("ClientTour", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.Property<long>("ToursId")
                        .HasColumnType("bigint");

                    b.HasKey("ClientsId", "ToursId");

                    b.HasIndex("ToursId");

                    b.ToTable("ClientTour");
                });

            modelBuilder.Entity("EmailPerson", b =>
                {
                    b.Property<long>("EmailsId")
                        .HasColumnType("bigint");

                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.HasKey("EmailsId", "PersonsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("EmailPerson");
                });

            modelBuilder.Entity("HotelHotelConfiguration", b =>
                {
                    b.Property<int>("HotelConfigurationsId")
                        .HasColumnType("int");

                    b.Property<int>("HotelsId")
                        .HasColumnType("int");

                    b.HasKey("HotelConfigurationsId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("HotelHotelConfiguration");
                });

            modelBuilder.Entity("HotelHotelService", b =>
                {
                    b.Property<int>("HotelServicesId")
                        .HasColumnType("int");

                    b.Property<int>("HotelsId")
                        .HasColumnType("int");

                    b.HasKey("HotelServicesId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("HotelHotelService");
                });

            modelBuilder.Entity("HotelTour", b =>
                {
                    b.Property<int>("HotelsId")
                        .HasColumnType("int");

                    b.Property<long>("ToursId")
                        .HasColumnType("bigint");

                    b.HasKey("HotelsId", "ToursId");

                    b.HasIndex("ToursId");

                    b.ToTable("HotelTour");
                });

            modelBuilder.Entity("PersonPhone", b =>
                {
                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.Property<long>("PhonesId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonsId", "PhonesId");

                    b.HasIndex("PhonesId");

                    b.ToTable("PersonPhone");
                });

            modelBuilder.Entity("SettlementTour", b =>
                {
                    b.Property<int>("SettlementsId")
                        .HasColumnType("int");

                    b.Property<long>("ToursId")
                        .HasColumnType("bigint");

                    b.HasKey("SettlementsId", "ToursId");

                    b.HasIndex("ToursId");

                    b.ToTable("SettlementTour");
                });

            modelBuilder.Entity("TourTransportType", b =>
                {
                    b.Property<long>("ToursId")
                        .HasColumnType("bigint");

                    b.Property<int>("TransportTypesId")
                        .HasColumnType("int");

                    b.HasKey("ToursId", "TransportTypesId");

                    b.HasIndex("TransportTypesId");

                    b.ToTable("TourTransportType");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BedConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Capacity")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BedConfigurations");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HotelId");

                    b.HasIndex("TourId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BookingChildren", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookingDataId")
                        .HasColumnType("bigint");

                    b.Property<short>("ChildrenAge")
                        .HasColumnType("smallint");

                    b.Property<short>("ChildrenCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BookingDataId");

                    b.ToTable("BookingChildrens");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BookingData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("AdultsCount")
                        .HasColumnType("smallint");

                    b.Property<int?>("BedConfigurationId")
                        .HasColumnType("int");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateBeginPeriod")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEndPeriod")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedConfigurationId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingDatas");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TouragencyAccountRoleId")
                        .HasColumnType("int");

                    b.Property<string>("TouristNickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("TouragencyAccountRoleId");

                    b.HasIndex("TouristNickname")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FlagUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettlementId")
                        .HasColumnType("int");

                    b.Property<int?>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettlementId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompassSide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllowChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowPets")
                        .HasColumnType("bit");

                    b.Property<string>("WindowView")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HotelConfigurations");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelServiceTypeId");

                    b.ToTable("HotelServices");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HotelServiceTypes");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middlename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Phone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint");

                    b.Property<string>("ReviewCaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<long>("TourId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TourId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.ReviewImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Tour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreeSeats")
                        .HasColumnType("int");

                    b.Property<bool>("IsHaveNightRides")
                        .HasColumnType("bit");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<short>("NightRidesCount")
                        .HasColumnType("smallint");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.HasIndex("TourStateId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TourImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TourNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourNameId");

                    b.ToTable("TourImages");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TourName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageJSONStructureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourNames");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TourState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourStates");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TouragencyAccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TouragencyAccountRoles");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TouragencyEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.ToTable("TouragencyEmployees");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TouragencyEmployeeAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TouragencyAccountRoleId")
                        .HasColumnType("int");

                    b.Property<int>("TouragencyEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TouragencyAccountRoleId");

                    b.HasIndex("TouragencyEmployeeId");

                    b.ToTable("TouragencyEmployeeAccounts");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes");
                });

            modelBuilder.Entity("BedConfigurationHotel", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.BedConfiguration", null)
                        .WithMany()
                        .HasForeignKey("BedConfigurationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientTour", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmailPerson", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Email", null)
                        .WithMany()
                        .HasForeignKey("EmailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelHotelConfiguration", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.HotelConfiguration", null)
                        .WithMany()
                        .HasForeignKey("HotelConfigurationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelHotelService", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.HotelService", null)
                        .WithMany()
                        .HasForeignKey("HotelServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelTour", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonPhone", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Phone", null)
                        .WithMany()
                        .HasForeignKey("PhonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SettlementTour", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Settlement", null)
                        .WithMany()
                        .HasForeignKey("SettlementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourTransportType", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.TransportType", null)
                        .WithMany()
                        .HasForeignKey("TransportTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Booking", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Hotel");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BookingChildren", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.BookingData", "BookingData")
                        .WithMany("BookingChildren")
                        .HasForeignKey("BookingDataId");

                    b.Navigation("BookingData");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BookingData", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.BedConfiguration", "BedConfiguration")
                        .WithMany("BookingDatas")
                        .HasForeignKey("BedConfigurationId");

                    b.HasOne("TouragencyWebApi.DAL.Entities.Booking", "Booking")
                        .WithMany("BookingData")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedConfiguration");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Client", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("TouragencyWebApi.DAL.Entities.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.TouragencyAccountRole", "TouragencyAccountRole")
                        .WithMany("Clients")
                        .HasForeignKey("TouragencyAccountRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TouragencyAccountRole");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Email", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.ContactType", "ContactType")
                        .WithMany("Emails")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Hotel", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Settlement", "Settlement")
                        .WithMany("Hotels")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelImage", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelService", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.HotelServiceType", "HotelServiceType")
                        .WithMany("HotelServices")
                        .HasForeignKey("HotelServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelServiceType");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Phone", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.ContactType", "ContactType")
                        .WithMany("Phones")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Review", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.ReviewImage", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Review", "Review")
                        .WithMany("ReviewImages")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Settlement", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Country", "Country")
                        .WithMany("Settlements")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Tour", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.TourName", "Name")
                        .WithMany("Tours")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.TourState", "TourState")
                        .WithMany("Tours")
                        .HasForeignKey("TourStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Name");

                    b.Navigation("TourState");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TourImage", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.TourName", "TourName")
                        .WithMany("TourImages")
                        .HasForeignKey("TourNameId");

                    b.Navigation("TourName");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TouragencyEmployee", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.Person", "Person")
                        .WithOne("TouragencyEmployee")
                        .HasForeignKey("TouragencyWebApi.DAL.Entities.TouragencyEmployee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.Position", "Position")
                        .WithMany("TouragencyEmployees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TouragencyEmployeeAccount", b =>
                {
                    b.HasOne("TouragencyWebApi.DAL.Entities.TouragencyAccountRole", "TouragencyAccountRole")
                        .WithMany("TouragencyEmployeeAccounts")
                        .HasForeignKey("TouragencyAccountRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouragencyWebApi.DAL.Entities.TouragencyEmployee", "TouragencyEmployee")
                        .WithMany()
                        .HasForeignKey("TouragencyEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouragencyAccountRole");

                    b.Navigation("TouragencyEmployee");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BedConfiguration", b =>
                {
                    b.Navigation("BookingDatas");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Booking", b =>
                {
                    b.Navigation("BookingData");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.BookingData", b =>
                {
                    b.Navigation("BookingChildren");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.ContactType", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Country", b =>
                {
                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelImages");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.HotelServiceType", b =>
                {
                    b.Navigation("HotelServices");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Person", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("TouragencyEmployee");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Position", b =>
                {
                    b.Navigation("TouragencyEmployees");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Review", b =>
                {
                    b.Navigation("ReviewImages");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Settlement", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TourName", b =>
                {
                    b.Navigation("TourImages");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TourState", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TouragencyWebApi.DAL.Entities.TouragencyAccountRole", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("TouragencyEmployeeAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
